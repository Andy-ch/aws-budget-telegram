# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

on:
  push:
    branches:
    - "main"
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Install AWS credentials file
      run: cp -r .aws ~/.aws

    - name: Write down the decryption key
      run: echo "${{ secrets.ENCRYPTION_KEY }}" > vault_pass

    - name: Install Ansible
      run: |
        set -e
        sudo -E apt-add-repository --yes --update ppa:ansible/ansible
        sudo apt update
        sudo apt install -y ansible-core

    - name: Decrypt AWS credentials file
      id: aws-decrypt
      continue-on-error: true
      run: ansible-vault decrypt --vault-pass-file vault_pass ~/.aws/credentials

    - name: Decrypt secret TF variables
      id: tfvars-decrypt
      continue-on-error: true
      run: ansible-vault decrypt --vault-pass-file vault_pass secrets.auto.tfvars

    - name: Check for decryption failures
      if: steps.aws-decrypt.outcome != 'success' || steps.tfvars-decrypt.outcome != 'success'
      run: |
        echo 'Ansible Vault decryption failed. .aws/credentials and secrets.auto.tfvars files must be encrypted with Ansible Vault with the ENCRYPTION_KEY secret of your Github repository.
        It is possible that your credentials are stored in the PUBLIC Github repository UNENCRYPTED!!!
        This may cause your AWS account to be used for malicious activities!!!
        If any credentials may have leaked into the public (AWS CLI keys, or Telegram bot credentials), change them ASAP!!!
        Run ./scripts/precommit.sh script locally to set up a Git hook that will verify the state of the encrypted files before committing'
        exit 1

    - name: Pack the Lambda zip file
      run: |
        mkdir lambda
        pip3 install -r requirements.txt -t lambda
        cp lambda.py lambda/
        cd lambda
        zip ../lambda.zip *

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
